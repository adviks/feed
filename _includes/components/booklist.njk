<section class="book_section">
    <button class="scroll_btn left" onclick="scrollBooks(-1)">&#8592;</button> <!-- Left Arrow -->
    
    <div class="book_grid" id="bookContainer">
        {% for book in booklist | reverse %}
        <div class="book_item">
            <a href="{{ book.url | url }}" class="book_link">
                <img src="{{ book.data.thumbnail }}" alt="{{ book.data.title }}" class="book_thumbnail">
                <p class="book_title">{{ book.data.title }}</p>
            </a>
        </div>
        {% endfor %}
    </div>

    <button class="scroll_btn right" onclick="scrollBooks(1)">&#8594;</button> <!-- Right Arrow -->
</section>

<style>
.book_section {
    position: relative;
    width: 100%;
    overflow: hidden;
}

.book_grid {
    display: flex;
    overflow-x: auto;
    scroll-behavior: smooth;
    scroll-snap-type: x mandatory;
    gap: 5px;
    padding: 10px 0;
    white-space: nowrap;
    scrollbar-width: none; /* Hide scrollbar */
    -ms-overflow-style: none;
    width: 100%;
}

.book_grid::-webkit-scrollbar {
    display: none;
}

.book_item {
    flex: 0 0 120px;
    text-align: center;
    scroll-snap-align: start;
}

.book_thumbnail {
    width: 120px;
    height: 180px;
    object-fit: cover;
    border-radius: 6px;
    box-shadow: 0px 3px 8px rgba(0, 0, 0, 0.2);
    transition: transform 0.2s ease-in-out;
}

.book_thumbnail:hover {
    transform: scale(1.05);
}

.book_title {
    margin-top: 5px;
    font-size: 0.85rem;
    font-weight: 600;
    text-align: center;
    max-width: 100%;
    white-space: normal;
    word-wrap: break-word;
    overflow-wrap: break-word;
    line-height: 1.2;
}

/* Overlay Scroll Buttons */
.scroll_btn {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background: rgba(0, 0, 0, 0.6);
    color: white;
    border: none;
    padding: 10px 12px;
    font-size: 18px;
    cursor: pointer;
    border-radius: 50%;
    transition: background 0.2s ease-in-out;
    z-index: 10;
}

.scroll_btn:hover {
    background: rgba(0, 0, 0, 0.8);
}

.scroll_btn.left {
    left: 5px;
}

.scroll_btn.right {
    right: 5px;
}

/* Hide buttons when not needed */
.scroll_btn:disabled {
    opacity: 0.3;
    cursor: default;
}

/* Responsive Adjustments */
@media (max-width: 768px) {
    .book_item {
        flex: 0 0 100px;
    }
    
    .book_thumbnail {
        width: 100px;
        height: 160px;
    }

    .book_title {
        font-size: 0.8rem;
    }
}

</style>

<script>
const bookContainer = document.getElementById("bookContainer");
const leftButton = document.querySelector(".scroll_btn.left");
const rightButton = document.querySelector(".scroll_btn.right");

function updateButtons() {
    const scrollLeft = bookContainer.scrollLeft;
    const maxScrollLeft = bookContainer.scrollWidth - bookContainer.clientWidth;

    leftButton.style.display = scrollLeft > 0 ? "block" : "none";
    rightButton.style.display = scrollLeft < maxScrollLeft ? "block" : "none";
}

function scrollBooks(direction) {
    const scrollAmount = bookContainer.clientWidth * 0.8;
    bookContainer.scrollBy({ left: direction * scrollAmount, behavior: "smooth" });

    setTimeout(updateButtons, 300); // Allow time for smooth scrolling to take effect
}

// Detect resize & update button visibility dynamically
window.addEventListener("resize", updateButtons);
window.addEventListener("load", updateButtons);

// Enable swipe gesture scrolling
let startX = 0;
bookContainer.addEventListener("touchstart", (e) => {
    startX = e.touches[0].clientX;
});

bookContainer.addEventListener("touchmove", (e) => {
    let moveX = e.touches[0].clientX;
    let diff = startX - moveX;
    bookContainer.scrollLeft += diff * 0.5; // Adjust speed for smoothness
    startX = moveX;
    updateButtons();
});

</script>
